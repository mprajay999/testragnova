[TextBlock(citations=None, text='```typescript\nimport { type ClassValue, clsx } from "clsx";\nimport { twMerge } from "tailwind-merge";\n\n/**\n * Combines multiple class names into a single string, merging Tailwind CSS classes efficiently\n * @param inputs - Class values to be combined\n * @returns A string of merged class names\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Formats a date to a human-readable string\n * @param date - The date to format\n * @param options - Intl.DateTimeFormatOptions\n * @returns Formatted date string\n */\nexport function formatDate(\n  date: Date | string,\n  options: Intl.DateTimeFormatOptions = {\n    month: "long",\n    day: "numeric",\n    year: "numeric",\n  }\n): string {\n  if (typeof date === "string") {\n    date = new Date(date);\n  }\n  \n  return new Intl.DateTimeFormat("en-US", options).format(date);\n}\n\n/**\n * Truncates text to a specified length and adds ellipsis\n * @param text - The text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return `${text.substring(0, maxLength).trim()}...`;\n}\n\n/**\n * Creates a URL-friendly slug from a string\n * @param text - The text to convert to a slug\n * @returns A URL-friendly slug\n */\nexport function slugify(text: string): string {\n  return text\n    .toLowerCase()\n    .replace(/[^\\w ]+/g, "")\n    .replace(/ +/g, "-");\n}\n\n/**\n * Checks if an element is in the viewport\n * @param element - The DOM element to check\n * @param offset - Optional offset to trigger before fully in viewport\n * @returns Boolean indicating if element is in viewport\n */\nexport function isElementInViewport(\n  element: HTMLElement,\n  offset: number = 0\n): boolean {\n  const rect = element.getBoundingClientRect();\n  return (\n    rect.top - offset <= window.innerHeight &&\n    rect.bottom + offset >= 0\n  );\n}\n\n/**\n * Debounces a function call\n * @param func - The function to debounce\n * @param wait - Time to wait in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n  \n  return function(...args: Parameters<T>) {\n    const later = () => {\n      timeout = null;\n      func(...args);\n    };\n    \n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n}\n\n/**\n * Theme colors for the application\n */\nexport const themeColors = {\n  primary: "#1A1A1A",\n  secondary: "#C0A363",\n  accent: "#E4B769",\n  background: "#F5F5F5",\n  white: "#FFFFFF",\n  dark: "#0A0A0A",\n};\n\n/**\n * Validates an email address\n * @param email - The email to validate\n * @returns Boolean indicating if email is valid\n */\nexport function isValidEmail(email: string): boolean {\n  const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return regex.test(email);\n}\n\n/**\n * Formats a phone number to a consistent format\n * @param phone - The phone number to format\n * @returns Formatted phone number\n */\nexport function formatPhoneNumber(phone: string): string {\n  const cleaned = phone.replace(/\\D/g, "");\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return `(${match[1]}) ${match[2]}-${match[3]}`;\n  }\n  return phone;\n}\n```', type='text')]