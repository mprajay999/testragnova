[TextBlock(citations=None, text="```typescript\n// lib/db.ts\nimport { Pool, PoolClient } from 'pg';\nimport { createClient } from '@supabase/supabase-js';\n\n// Database configuration\nconst dbConfig = {\n  host: process.env.DB_HOST || 'localhost',\n  port: parseInt(process.env.DB_PORT || '5432'),\n  database: process.env.DB_NAME || 'kuxyury_mexican',\n  user: process.env.DB_USER || 'postgres',\n  password: process.env.DB_PASSWORD || '',\n  max: 20, // Max number of clients in the pool\n  idleTimeoutMillis: 30000, // How long a client is allowed to remain idle\n  connectionTimeoutMillis: 2000, // How long to wait for a connection\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n};\n\n// Create a pool of PostgreSQL clients\nconst pool = new Pool(dbConfig);\n\n// Supabase client for easier access to storage and authentication\nconst supabaseUrl = process.env.SUPABASE_URL || '';\nconst supabaseKey = process.env.SUPABASE_ANON_KEY || '';\nconst supabase = createClient(supabaseUrl, supabaseKey);\n\n// Connect to the database\nexport const connect = async (): Promise<PoolClient> => {\n  try {\n    const client = await pool.connect();\n    return client;\n  } catch (error) {\n    console.error('Error connecting to the database:', error);\n    throw error;\n  }\n};\n\n// Execute a query\nexport const query = async (text: string, params: any[] = []): Promise<any> => {\n  const client = await connect();\n  try {\n    const result = await client.query(text, params);\n    return result.rows;\n  } catch (error) {\n    console.error('Error executing query:', error);\n    throw error;\n  } finally {\n    client.release();\n  }\n};\n\n// Menu data access functions\nexport const getMenuItems = async (category?: string): Promise<any[]> => {\n  let queryText = 'SELECT * FROM menu_items';\n  const params: any[] = [];\n  \n  if (category) {\n    queryText += ' WHERE category = $1';\n    params.push(category);\n  }\n  \n  queryText += ' ORDER BY id ASC';\n  return query(queryText, params);\n};\n\nexport const getMenuItem = async (id: number): Promise<any> => {\n  const items = await query('SELECT * FROM menu_items WHERE id = $1', [id]);\n  return items[0];\n};\n\n// Reservation data access functions\nexport const createReservation = async (data: any): Promise<any> => {\n  const { name, email, phone, date, time, guests, specialRequests } = data;\n  \n  const queryText = `\n    INSERT INTO reservations (name, email, phone, date, time, guests, special_requests, created_at)\n    VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())\n    RETURNING *\n  `;\n  \n  const params = [name, email, phone, date, time, guests, specialRequests];\n  const result = await query(queryText, params);\n  return result[0];\n};\n\nexport const checkReservationAvailability = async (date: string, time: string): Promise<boolean> => {\n  const result = await query(\n    'SELECT COUNT(*) FROM reservations WHERE date = $1 AND time = $2',\n    [date, time]\n  );\n  \n  // Assume we have a maximum capacity of 10 reservations per time slot\n  return parseInt(result[0].count) < 10;\n};\n\n// Testimonial data access functions\nexport const getTestimonials = async (limit = 5): Promise<any[]> => {\n  return query('SELECT * FROM testimonials ORDER BY created_at DESC LIMIT $1', [limit]);\n};\n\n// Gallery data access functions\nexport const getGalleryImages = async (): Promise<any[]> => {\n  return query('SELECT * FROM gallery ORDER BY display_order ASC');\n};\n\n// About page data\nexport const getAboutData = async (): Promise<any> => {\n  const result = await query('SELECT * FROM about_content WHERE id = 1');\n  return result[0];\n};\n\n// Chef profiles\nexport const getChefProfiles = async (): Promise<any[]> => {\n  return query('SELECT * FROM chef_profiles ORDER BY display_order ASC');\n};\n\n// Contact information\nexport const getContactInfo = async (): Promise<any> => {\n  const result = await query('SELECT * FROM contact_info WHERE id = 1');\n  return result[0];\n};\n\n// Pool error handling\npool.on('error', (err) => {\n  console.error('Unexpected error on idle client', err);\n  process.exit(-1);\n});\n\n// Export the supabase client for storage and auth operations\nexport { supabase };\n\n// Export the pool for use in other parts of the application\nexport default pool;\n```", type='text')]