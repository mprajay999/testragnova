[TextBlock(citations=None, text="```typescript\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\n\nexport type MenuItem = {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  image: string;\n  featured?: boolean;\n  region?: string;\n  ingredients?: string[];\n  spiceLevel?: number;\n  dietary?: {\n    vegetarian?: boolean;\n    vegan?: boolean;\n    glutenFree?: boolean;\n  };\n};\n\nexport type MenuCategory = {\n  id: string;\n  name: string;\n  description: string;\n};\n\nexport type MenuFilter = {\n  category?: string;\n  region?: string;\n  dietary?: 'vegetarian' | 'vegan' | 'glutenFree';\n  spiceLevel?: number;\n};\n\nexport const useMenu = () => {\n  const [menuItems, setMenuItems] = useState<MenuItem[]>([]);\n  const [categories, setCategories] = useState<MenuCategory[]>([]);\n  const [regions, setRegions] = useState<string[]>([]);\n  const [filteredItems, setFilteredItems] = useState<MenuItem[]>([]);\n  const [filters, setFilters] = useState<MenuFilter>({});\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchMenu = async () => {\n      try {\n        setIsLoading(true);\n        // In a production environment, this would be an API call to your backend\n        // For example: const response = await fetch('/api/menu');\n        \n        // Simulating API fetch with timeout\n        await new Promise(resolve => setTimeout(resolve, 800));\n        \n        // This would be the data from your API\n        const menuData = {\n          categories: [\n            { id: 'appetizers', name: 'Appetizers', description: 'Start your culinary journey with these exquisite small plates.' },\n            { id: 'soups', name: 'Soups & Salads', description: 'Fresh and vibrant preparations to cleanse your palate.' },\n            { id: 'main-courses', name: 'Main Courses', description: 'Signature dishes crafted with precision and authentic flavors.' },\n            { id: 'desserts', name: 'Desserts', description: 'Sweet endings to complement your dining experience.' },\n            { id: 'beverages', name: 'Beverages', description: 'Handcrafted drinks to enhance your meal.' }\n          ],\n          items: [\n            {\n              id: 'guacamole-tradicional',\n              name: 'Guacamole Tradicional',\n              description: 'Freshly prepared tableside with Hass avocados, cilantro, lime, and handmade tortilla chips.',\n              price: 16,\n              category: 'appetizers',\n              image: '/images/menu/guacamole.jpg',\n              featured: true,\n              region: 'Oaxaca',\n              ingredients: ['avocado', 'cilantro', 'lime', 'tomato', 'onion'],\n              spiceLevel: 1,\n              dietary: {\n                vegetarian: true,\n                vegan: true,\n                glutenFree: true\n              }\n            },\n            // More menu items would be here in production\n          ],\n          regions: ['Oaxaca', 'Yucatan', 'Jalisco', 'Mexico City', 'Puebla']\n        };\n        \n        setMenuItems(menuData.items);\n        setCategories(menuData.categories);\n        setRegions(menuData.regions);\n        setFilteredItems(menuData.items);\n        setError(null);\n      } catch (err) {\n        setError('Failed to load menu. Please try again later.');\n        toast.error('Error loading menu data.');\n        console.error('Error fetching menu:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchMenu();\n  }, []);\n\n  useEffect(() => {\n    // Apply filters whenever filters state changes\n    let result = [...menuItems];\n    \n    if (filters.category) {\n      result = result.filter(item => item.category === filters.category);\n    }\n    \n    if (filters.region) {\n      result = result.filter(item => item.region === filters.region);\n    }\n    \n    if (filters.dietary) {\n      result = result.filter(item => item.dietary && item.dietary[filters.dietary as keyof typeof item.dietary]);\n    }\n    \n    if (filters.spiceLevel !== undefined) {\n      result = result.filter(item => item.spiceLevel && item.spiceLevel <= filters.spiceLevel);\n    }\n    \n    setFilteredItems(result);\n  }, [filters, menuItems]);\n\n  const updateFilters = (newFilters: Partial<MenuFilter>) => {\n    setFilters(prev => ({ ...prev, ...newFilters }));\n  };\n\n  const clearFilters = () => {\n    setFilters({});\n  };\n\n  const getFeaturedItems = () => {\n    return menuItems.filter(item => item.featured);\n  };\n\n  const getItemsByCategory = (categoryId: string) => {\n    return menuItems.filter(item => item.category === categoryId);\n  };\n\n  const getItemsByRegion = (region: string) => {\n    return menuItems.filter(item => item.region === region);\n  };\n\n  return {\n    menuItems: filteredItems,\n    categories,\n    regions,\n    isLoading,\n    error,\n    filters,\n    updateFilters,\n    clearFilters,\n    getFeaturedItems,\n    getItemsByCategory,\n    getItemsByRegion\n  };\n};\n\nexport default useMenu;\n```", type='text')]