[TextBlock(citations=None, text='```tsx\n"use client"\n\nimport * as React from "react"\nimport { Slot } from "@radix-ui/react-slot"\nimport { cva, type VariantProps } from "class-variance-authority"\nimport { cn } from "@/lib/utils"\n\nconst buttonVariants = cva(\n  "inline-flex items-center justify-center rounded-full text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none",\n  {\n    variants: {\n      variant: {\n        default:\n          "bg-[#C0A363] text-white hover:bg-[#E4B769] focus-visible:ring-[#C0A363]",\n        destructive:\n          "bg-red-500 text-white hover:bg-red-600 focus-visible:ring-red-500",\n        outline:\n          "border border-[#C0A363] text-[#C0A363] hover:bg-[#C0A363]/10 focus-visible:ring-[#C0A363]",\n        secondary:\n          "bg-[#1A1A1A] text-white hover:bg-[#1A1A1A]/80 focus-visible:ring-[#1A1A1A]",\n        ghost:\n          "hover:bg-[#C0A363]/10 hover:text-[#C0A363] focus-visible:ring-[#C0A363]",\n        link: "text-[#C0A363] underline-offset-4 hover:underline focus-visible:ring-[#C0A363]",\n        reservation: "bg-[#E4B769] text-[#1A1A1A] font-semibold hover:bg-[#C0A363] hover:text-white focus-visible:ring-[#E4B769]",\n      },\n      size: {\n        default: "h-10 px-6 py-2",\n        sm: "h-9 px-4 py-1.5",\n        lg: "h-12 px-8 py-3 text-base",\n        xl: "h-14 px-10 py-3.5 text-lg",\n        icon: "h-10 w-10",\n      },\n    },\n    defaultVariants: {\n      variant: "default",\n      size: "default",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : "button"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = "Button"\n\nexport { Button, buttonVariants }\n```', type='text')]